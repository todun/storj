// Code generated by MockGen. DO NOT EDIT.
// Source: storj.io/storj/pkg/eestream (interfaces: ErasureScheme)

// Package mock_eestream is a generated GoMock package.
package mock_eestream

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockErasureScheme is a mock of ErasureScheme interface
type MockErasureScheme struct {
	ctrl     *gomock.Controller
	recorder *MockErasureSchemeMockRecorder
}

// MockErasureSchemeMockRecorder is the mock recorder for MockErasureScheme
type MockErasureSchemeMockRecorder struct {
	mock *MockErasureScheme
}

// NewMockErasureScheme creates a new mock instance
func NewMockErasureScheme(ctrl *gomock.Controller) *MockErasureScheme {
	mock := &MockErasureScheme{ctrl: ctrl}
	mock.recorder = &MockErasureSchemeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErasureScheme) EXPECT() *MockErasureSchemeMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockErasureScheme) Decode(arg0 []byte, arg1 map[int][]byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Decode", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (mr *MockErasureSchemeMockRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockErasureScheme)(nil).Decode), arg0, arg1)
}

// DecodedBlockSize mocks base method
func (m *MockErasureScheme) DecodedBlockSize() int {
	ret := m.ctrl.Call(m, "DecodedBlockSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// DecodedBlockSize indicates an expected call of DecodedBlockSize
func (mr *MockErasureSchemeMockRecorder) DecodedBlockSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodedBlockSize", reflect.TypeOf((*MockErasureScheme)(nil).DecodedBlockSize))
}

// Encode mocks base method
func (m *MockErasureScheme) Encode(arg0 []byte, arg1 func(int, []byte)) error {
	ret := m.ctrl.Call(m, "Encode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockErasureSchemeMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockErasureScheme)(nil).Encode), arg0, arg1)
}

// EncodedBlockSize mocks base method
func (m *MockErasureScheme) EncodedBlockSize() int {
	ret := m.ctrl.Call(m, "EncodedBlockSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// EncodedBlockSize indicates an expected call of EncodedBlockSize
func (mr *MockErasureSchemeMockRecorder) EncodedBlockSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodedBlockSize", reflect.TypeOf((*MockErasureScheme)(nil).EncodedBlockSize))
}

// RequiredCount mocks base method
func (m *MockErasureScheme) RequiredCount() int {
	ret := m.ctrl.Call(m, "RequiredCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// RequiredCount indicates an expected call of RequiredCount
func (mr *MockErasureSchemeMockRecorder) RequiredCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiredCount", reflect.TypeOf((*MockErasureScheme)(nil).RequiredCount))
}

// TotalCount mocks base method
func (m *MockErasureScheme) TotalCount() int {
	ret := m.ctrl.Call(m, "TotalCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// TotalCount indicates an expected call of TotalCount
func (mr *MockErasureSchemeMockRecorder) TotalCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalCount", reflect.TypeOf((*MockErasureScheme)(nil).TotalCount))
}
